let slash24sin8 = 65536.0;
let ipsin8 = 16777216;
let everySlash24 = range slash24 from parse_ipv4("0.0.0.0") to parse_ipv4("255.255.255.255") step 256
| where IsPublicIPv4AddressInt(slash24);
let routableSlash24s = bgpdump
| distinct prefix
| where prefix !contains ":"
| extend prefix_parts = split(prefix, "/")
| project startipint = parse_ipv4(tostring(prefix_parts[0])), cidr = toint(prefix_parts[1])
| where cidr != 0 // filter out 0.0.0.0/0
| extend endipint = startipint + IPv4CidrToCount(cidr)
| extend prefix_range = range(startipint, endipint, 256)
| mv-expand prefix_range
| project slash24 = tolong(prefix_range)
| distinct slash24
| where IsPublicIPv4AddressInt(slash24);
everySlash24
| join kind=leftanti (routableSlash24s) on slash24
| order by slash24 asc
| extend isPrefixStart = prev(slash24) + 256 != slash24
| extend prefixStart = case(isPrefixStart, slash24, 0)
| extend prefixGroup = row_cumsum(prefixStart, prefixStart != 0)
| extend prefixEnd = slash24 + 255
| summarize prefixStart=min(slash24), prefixEnd=max(prefixEnd) by prefixGroup
| project prefix=ToPrefix(prefixStart, prefixEnd)